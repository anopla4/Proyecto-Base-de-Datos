// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SB_backend.Models;

namespace SB_backend.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20210527000634_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SB_backend.Models.Caracter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caracter_Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Caracters");
                });

            modelBuilder.Entity("SB_backend.Models.Date", b =>
                {
                    b.Property<string>("Day");

                    b.Property<string>("Hour");

                    b.HasKey("Day", "Hour");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("SB_backend.Models.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("SB_backend.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<Guid>("Current_TeamId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Year_Experience");

                    b.HasKey("Id");

                    b.HasIndex("Current_TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("SB_backend.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Position_Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new { Id = new Guid("9fe87af2-d11c-43b7-b8e6-c6afabcf6013"), Position_Name = "C" },
                        new { Id = new Guid("375f4c73-0ed4-4acc-ac98-3651f33c7d00"), Position_Name = "1B" },
                        new { Id = new Guid("9cb56e55-7148-4e9d-bdc5-3fcf4b352718"), Position_Name = "2B" },
                        new { Id = new Guid("4d67b338-fd3e-4834-9033-119f506ca359"), Position_Name = "3B" },
                        new { Id = new Guid("5d2a72c3-d120-4950-9ce1-1df9abdb3221"), Position_Name = "SS" },
                        new { Id = new Guid("b4bdb725-c061-42c0-94f1-24915d60c476"), Position_Name = "Lanzador" },
                        new { Id = new Guid("383cc980-a611-435b-a3eb-12daecf4b799"), Position_Name = "LF" },
                        new { Id = new Guid("9411e2b7-71d6-49bd-a7f0-795a4cf43b56"), Position_Name = "RF" },
                        new { Id = new Guid("19c45da0-76fb-4a36-8505-2c92d240f1ae"), Position_Name = "CF" },
                        new { Id = new Guid("d0d3cf5e-54e8-4ab5-aa5f-a18d2ab87295"), Position_Name = "BD" }
                    );
                });

            modelBuilder.Entity("SB_backend.Models.PositionPlayer", b =>
                {
                    b.Property<Guid>("PlayerId");

                    b.Property<Guid>("PositionId");

                    b.Property<int>("Position_Average");

                    b.HasKey("PlayerId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionPlayers");
                });

            modelBuilder.Entity("SB_backend.Models.Serie", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("Init_Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("date");

                    b.Property<Guid>("CaracterId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id", "Init_Date", "End_Date");

                    b.HasAlternateKey("End_Date", "Id", "Init_Date");

                    b.HasIndex("CaracterId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("SB_backend.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<string>("Initials")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SB_backend.Models.Player", b =>
                {
                    b.HasOne("SB_backend.Models.Team", "Current_Team")
                        .WithMany()
                        .HasForeignKey("Current_TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SB_backend.Models.PositionPlayer", b =>
                {
                    b.HasOne("SB_backend.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SB_backend.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SB_backend.Models.Serie", b =>
                {
                    b.HasOne("SB_backend.Models.Caracter", "Caracter_Serie")
                        .WithMany()
                        .HasForeignKey("CaracterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
