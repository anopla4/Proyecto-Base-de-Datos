// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SB_backend.Models;

namespace SB_backend.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SB_backend.Models.Caracter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caracter_Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Caracters");
                });

            modelBuilder.Entity("SB_backend.Models.Date", b =>
                {
                    b.Property<string>("Day");

                    b.Property<string>("Hour");

                    b.HasKey("Day", "Hour");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("SB_backend.Models.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("SB_backend.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<Guid>("Current_TeamId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Year_Experience");

                    b.HasKey("Id");

                    b.HasIndex("Current_TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("SB_backend.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Position_Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new { Id = new Guid("f4a74e66-0307-4771-91e1-29c39bef8781"), Position_Name = "C" },
                        new { Id = new Guid("2303c988-2283-47c3-8509-5d42724bd2a2"), Position_Name = "1B" },
                        new { Id = new Guid("57307906-6132-471e-93f8-d57d272b545e"), Position_Name = "2B" },
                        new { Id = new Guid("6b06a626-6ae4-4710-a058-0bf90824b1a5"), Position_Name = "3B" },
                        new { Id = new Guid("0495a2ca-b6e5-456c-be5a-96223ccaf2cc"), Position_Name = "SS" },
                        new { Id = new Guid("7854f0a9-04fa-4a5c-bb84-41db52ad4bcd"), Position_Name = "Lanzador" },
                        new { Id = new Guid("c7ba4130-ed5a-4c31-8deb-2096344b5403"), Position_Name = "LF" },
                        new { Id = new Guid("afef3de9-578d-4185-94d8-1b165caf79ec"), Position_Name = "RF" },
                        new { Id = new Guid("2af415a2-f1b8-4f68-8e71-0a581cf8cb15"), Position_Name = "CF" },
                        new { Id = new Guid("3c383560-3658-45ff-9089-7ef0eaafa5e8"), Position_Name = "BD" }
                    );
                });

            modelBuilder.Entity("SB_backend.Models.PositionPlayer", b =>
                {
                    b.Property<Guid>("PlayerId");

                    b.Property<Guid>("PositionId");

                    b.Property<int>("Position_Average");

                    b.HasKey("PlayerId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionPlayers");
                });

            modelBuilder.Entity("SB_backend.Models.Serie", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("CaracterId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberOfGames");

                    b.HasKey("Id", "InitDate", "EndDate");

                    b.HasIndex("CaracterId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("SB_backend.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<string>("Initials")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SB_backend.Models.TeamSerie", b =>
                {
                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("SerieId");

                    b.Property<DateTime>("SerieInitDate");

                    b.Property<DateTime>("SerieEndDate");

                    b.Property<int>("FinalPosition");

                    b.Property<int>("LosserGames");

                    b.Property<int>("WinnerGames");

                    b.HasKey("TeamId", "SerieId", "SerieInitDate", "SerieEndDate");

                    b.HasIndex("SerieId", "SerieInitDate", "SerieEndDate");

                    b.ToTable("TeamsSeries");
                });

            modelBuilder.Entity("SB_backend.Models.TeamSeriePlayer", b =>
                {
                    b.Property<Guid>("PlayerId");

                    b.Property<Guid>("SerieId");

                    b.Property<DateTime>("SerieInitDate");

                    b.Property<DateTime>("SerieEndDate");

                    b.Property<Guid>("TeamSerieId");

                    b.HasKey("PlayerId", "SerieId", "SerieInitDate", "SerieEndDate");

                    b.HasIndex("TeamSerieId");

                    b.HasIndex("SerieId", "SerieInitDate", "SerieEndDate");

                    b.ToTable("TeamsSeriesPlayers");
                });

            modelBuilder.Entity("SB_backend.Models.Player", b =>
                {
                    b.HasOne("SB_backend.Models.Team", "Current_Team")
                        .WithMany()
                        .HasForeignKey("Current_TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SB_backend.Models.PositionPlayer", b =>
                {
                    b.HasOne("SB_backend.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SB_backend.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SB_backend.Models.Serie", b =>
                {
                    b.HasOne("SB_backend.Models.Caracter", "CaracterSerie")
                        .WithMany()
                        .HasForeignKey("CaracterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SB_backend.Models.TeamSerie", b =>
                {
                    b.HasOne("SB_backend.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SB_backend.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId", "SerieInitDate", "SerieEndDate")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SB_backend.Models.TeamSeriePlayer", b =>
                {
                    b.HasOne("SB_backend.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SB_backend.Models.Team", "TeamSerie")
                        .WithMany()
                        .HasForeignKey("TeamSerieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId", "SerieInitDate", "SerieEndDate")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
