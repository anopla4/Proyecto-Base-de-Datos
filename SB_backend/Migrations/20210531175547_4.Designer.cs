// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SB_backend.Models;

namespace SB_backend.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20210531175547_4")]
    partial class _4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SB_backend.Models.Caracter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caracter_Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Caracters");
                });

            modelBuilder.Entity("SB_backend.Models.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImgPath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("SB_backend.Models.Game", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("WinerTeamId");

                    b.Property<Guid>("LoserTeamId");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("GameTime")
                        .HasColumnType("time");

                    b.Property<Guid>("SerieId");

                    b.Property<DateTime>("SerieInitDate");

                    b.Property<DateTime>("SerieEndDate");

                    b.Property<int>("AgaintsCarrers");

                    b.Property<int>("InFavorCarrers");

                    b.Property<Guid>("PitcherLoserId");

                    b.Property<Guid>("PitcherWinerId");

                    b.HasKey("GameId", "WinerTeamId", "LoserTeamId", "GameDate", "GameTime", "SerieId", "SerieInitDate", "SerieEndDate");

                    b.HasIndex("LoserTeamId");

                    b.HasIndex("PitcherLoserId");

                    b.HasIndex("PitcherWinerId");

                    b.HasIndex("WinerTeamId");

                    b.HasIndex("SerieId", "SerieInitDate", "SerieEndDate");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SB_backend.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<int?>("Average");

                    b.Property<Guid?>("Current_TeamId");

                    b.Property<int>("DeffAverage");

                    b.Property<int?>("ERA");

                    b.Property<int?>("Hand");

                    b.Property<string>("ImgPath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Year_Experience");

                    b.HasKey("Id");

                    b.HasIndex("Current_TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("SB_backend.Models.PlayerChangeGame", b =>
                {
                    b.Property<Guid>("GameGameId");

                    b.Property<Guid>("PlayerInId");

                    b.Property<Guid>("PositionId");

                    b.Property<DateTime>("GameGameDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("GameGameTime")
                        .HasColumnType("time");

                    b.Property<Guid>("GameLoserTeamId");

                    b.Property<DateTime>("GameSerieEndDate");

                    b.Property<Guid>("GameSerieId");

                    b.Property<DateTime>("GameSerieInitDate");

                    b.Property<Guid>("GameWinerTeamId");

                    b.Property<Guid>("PlayerOutId");

                    b.HasKey("GameGameId", "PlayerInId", "PositionId");

                    b.HasIndex("PlayerInId");

                    b.HasIndex("PlayerOutId");

                    b.HasIndex("PositionId");

                    b.HasIndex("GameGameId", "GameWinerTeamId", "GameLoserTeamId", "GameGameDate", "GameGameTime", "GameSerieId", "GameSerieInitDate", "GameSerieEndDate");

                    b.ToTable("PlayersChangesGames");
                });

            modelBuilder.Entity("SB_backend.Models.PlayerGame", b =>
                {
                    b.Property<Guid>("gameGameId");

                    b.Property<Guid>("PlayerId");

                    b.Property<Guid>("PositionId");

                    b.Property<DateTime>("gameGameDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("gameGameTime")
                        .HasColumnType("time");

                    b.Property<Guid>("gameLoserTeamId");

                    b.Property<DateTime>("gameSerieEndDate");

                    b.Property<Guid>("gameSerieId");

                    b.Property<DateTime>("gameSerieInitDate");

                    b.Property<Guid>("gameWinerTeamId");

                    b.HasKey("gameGameId", "PlayerId", "PositionId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PositionId");

                    b.HasIndex("gameGameId", "gameWinerTeamId", "gameLoserTeamId", "gameGameDate", "gameGameTime", "gameSerieId", "gameSerieInitDate", "gameSerieEndDate");

                    b.ToTable("PlayersGames");
                });

            modelBuilder.Entity("SB_backend.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("PlayerId");

                    b.Property<string>("PositionName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Positions");

                    b.HasData(
                        new { Id = new Guid("05485544-d207-4b0f-8b02-0bab06c3c073"), PositionName = "C" },
                        new { Id = new Guid("63b7994c-77f5-43b4-91d3-93f84f4901f3"), PositionName = "1B" },
                        new { Id = new Guid("63d2dd45-c59d-40b5-8cd2-fb00d48b6234"), PositionName = "2B" },
                        new { Id = new Guid("f814ae3f-bbaa-4852-800a-e101686ff499"), PositionName = "3B" },
                        new { Id = new Guid("f89320f2-87a8-4017-9bbd-2e7e14d5368d"), PositionName = "SS" },
                        new { Id = new Guid("0ac31ac4-fdea-48a3-a265-d8bdd5b01d67"), PositionName = "P" },
                        new { Id = new Guid("6e610c27-1fef-4f40-972e-85db0be05d58"), PositionName = "LF" },
                        new { Id = new Guid("3f72a3f0-a790-4f90-a325-27d88e6093b8"), PositionName = "RF" },
                        new { Id = new Guid("db2c5b30-69c2-49c6-8a1d-5ee9dd258807"), PositionName = "CF" },
                        new { Id = new Guid("10bc1a46-32bd-4814-97e1-0ced00101136"), PositionName = "BD" }
                    );
                });

            modelBuilder.Entity("SB_backend.Models.Serie", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("CaracterId");

                    b.Property<Guid?>("LoserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberOfGames");

                    b.Property<int>("NumberOfTeams");

                    b.Property<Guid?>("WinerId");

                    b.HasKey("Id", "InitDate", "EndDate");

                    b.HasIndex("CaracterId");

                    b.HasIndex("LoserId");

                    b.HasIndex("WinerId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("SB_backend.Models.StarPositionPlayerSerie", b =>
                {
                    b.Property<Guid>("SerieId");

                    b.Property<DateTime>("SerieInitDate");

                    b.Property<DateTime>("SerieEndDate");

                    b.Property<Guid>("PositionId");

                    b.Property<Guid>("PlayerId");

                    b.HasKey("SerieId", "SerieInitDate", "SerieEndDate", "PositionId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PositionId");

                    b.ToTable("StarPositionPlayersSeries");
                });

            modelBuilder.Entity("SB_backend.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<string>("ImgPath");

                    b.Property<string>("Initials")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SB_backend.Models.TeamSerie", b =>
                {
                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("SerieId");

                    b.Property<DateTime>("SerieInitDate");

                    b.Property<DateTime>("SerieEndDate");

                    b.Property<int>("FinalPosition");

                    b.Property<int>("LostGames");

                    b.Property<int>("WonGames");

                    b.HasKey("TeamId", "SerieId", "SerieInitDate", "SerieEndDate");

                    b.HasIndex("SerieId", "SerieInitDate", "SerieEndDate");

                    b.ToTable("TeamsSeries");
                });

            modelBuilder.Entity("SB_backend.Models.TeamSerieDirector", b =>
                {
                    b.Property<Guid>("DirectorId");

                    b.Property<Guid>("SerieId");

                    b.Property<DateTime>("SerieInitDate");

                    b.Property<DateTime>("SerieEndDate");

                    b.Property<Guid>("TeamSerieId");

                    b.HasKey("DirectorId", "SerieId", "SerieInitDate", "SerieEndDate");

                    b.HasIndex("TeamSerieId");

                    b.HasIndex("SerieId", "SerieInitDate", "SerieEndDate");

                    b.ToTable("TeamsSeriesDirectors");
                });

            modelBuilder.Entity("SB_backend.Models.TeamSeriePlayer", b =>
                {
                    b.Property<Guid>("PlayerId");

                    b.Property<Guid>("SerieId");

                    b.Property<DateTime>("SerieInitDate");

                    b.Property<DateTime>("SerieEndDate");

                    b.Property<Guid>("TeamSerieId");

                    b.HasKey("PlayerId", "SerieId", "SerieInitDate", "SerieEndDate");

                    b.HasIndex("TeamSerieId");

                    b.HasIndex("SerieId", "SerieInitDate", "SerieEndDate");

                    b.ToTable("TeamsSeriesPlayers");
                });

            modelBuilder.Entity("SB_backend.Models.Game", b =>
                {
                    b.HasOne("SB_backend.Models.Team", "LoserTeam")
                        .WithMany()
                        .HasForeignKey("LoserTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Player", "PitcherLoser")
                        .WithMany()
                        .HasForeignKey("PitcherLoserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Player", "PitcherWiner")
                        .WithMany()
                        .HasForeignKey("PitcherWinerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Team", "WinerTeam")
                        .WithMany()
                        .HasForeignKey("WinerTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId", "SerieInitDate", "SerieEndDate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SB_backend.Models.Player", b =>
                {
                    b.HasOne("SB_backend.Models.Team", "Current_Team")
                        .WithMany()
                        .HasForeignKey("Current_TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SB_backend.Models.PlayerChangeGame", b =>
                {
                    b.HasOne("SB_backend.Models.Player", "PlayerIn")
                        .WithMany()
                        .HasForeignKey("PlayerInId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Player", "PlayerOut")
                        .WithMany()
                        .HasForeignKey("PlayerOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameGameId", "GameWinerTeamId", "GameLoserTeamId", "GameGameDate", "GameGameTime", "GameSerieId", "GameSerieInitDate", "GameSerieEndDate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SB_backend.Models.PlayerGame", b =>
                {
                    b.HasOne("SB_backend.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Game", "game")
                        .WithMany()
                        .HasForeignKey("gameGameId", "gameWinerTeamId", "gameLoserTeamId", "gameGameDate", "gameGameTime", "gameSerieId", "gameSerieInitDate", "gameSerieEndDate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SB_backend.Models.Position", b =>
                {
                    b.HasOne("SB_backend.Models.Player")
                        .WithMany("Positions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SB_backend.Models.Serie", b =>
                {
                    b.HasOne("SB_backend.Models.Caracter", "CaracterSerie")
                        .WithMany()
                        .HasForeignKey("CaracterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SB_backend.Models.Team", "Loser")
                        .WithMany()
                        .HasForeignKey("LoserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Team", "Winer")
                        .WithMany()
                        .HasForeignKey("WinerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SB_backend.Models.StarPositionPlayerSerie", b =>
                {
                    b.HasOne("SB_backend.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId", "SerieInitDate", "SerieEndDate")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SB_backend.Models.TeamSerie", b =>
                {
                    b.HasOne("SB_backend.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SB_backend.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId", "SerieInitDate", "SerieEndDate")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SB_backend.Models.TeamSerieDirector", b =>
                {
                    b.HasOne("SB_backend.Models.Director", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SB_backend.Models.Team", "TeamSerie")
                        .WithMany()
                        .HasForeignKey("TeamSerieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SB_backend.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId", "SerieInitDate", "SerieEndDate")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SB_backend.Models.TeamSeriePlayer", b =>
                {
                    b.HasOne("SB_backend.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Team", "TeamSerie")
                        .WithMany()
                        .HasForeignKey("TeamSerieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SB_backend.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId", "SerieInitDate", "SerieEndDate")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
